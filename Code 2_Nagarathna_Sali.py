# -*- coding: utf-8 -*-
"""Eirstay.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BcEcvwbT9Uizr5vAO_PzAgEZ1Z68u09R
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
import plotly.graph_objs as go
import plotly .offline as offline
import plotly.figure_factory as ff

# Importing dataset and examining it
dataset = pd.read_csv("/content/EireStay.csv")
print(dataset.head())
print(dataset.shape)
print(dataset.info())
print(dataset.describe())

print(dataset.info())
# Plotting Correlation Heatmap
corrs = dataset.corr()
figure = ff.create_annotated_heatmap(
    z=corrs.values,
    x=list(corrs.columns),
    y=list(corrs.index),
    annotation_text=corrs.round(2).values,
    showscale=True)
offline.plot(figure,filename='corrheatmap.html')

# Converting Categorical features into Numerical features
dataset['meal'] = dataset['meal'].map({'BB':0, 'FB':1, 'HB':2, 'SC':3,'Undefined':4})
dataset['market_segment'] = dataset['market_segment'].map({'Direct':0, 'Online TA':1})
dataset['reserved_room_type'] = dataset['reserved_room_type'].map({'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F': 5, 'G':6, 'H':7, 'I':8})
dataset['deposit_type'] = dataset['deposit_type'].map({'No Deposit':0, 'Non Refund':1, 'Refundable':2})
print(dataset.head(5))

print(dataset.info())
# Plotting Correlation Heatmap
corrs = dataset.corr()
figure = ff.create_annotated_heatmap(
    z=corrs.values,
    x=list(corrs.columns),
    y=list(corrs.index),
    annotation_text=corrs.round(2).values,
    showscale=True)
offline.plot(figure,filename='corrheatmap.html')

# Normalizing numerical features so that each feature has mean 0 and variance 1

feature_scaler = StandardScaler()

X_scaled = feature_scaler.fit_transform(dataset)

pca = PCA(n_components = 2)

pca.fit(X_scaled)

x_pca = pca.transform(X_scaled)

print("Variance explained by each of the n_components: ",pca.explained_variance_ratio_)

print("Total variance explained by the n_components: ",sum(pca.explained_variance_ratio_))

 

plt.figure(figsize = (8,6))

plt.scatter(x_pca[:,0], x_pca[:,1], cmap='plasma')

plt.xlabel('First Principal Component')

plt.ylabel('Second Principal Component')

plt.show()

inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# Implementing K-Means CLustering on dataset and visualizing clusters

kmeans = KMeans(n_clusters = 2)

kmeans.fit(X_scaled)

print("Cluster Centers: \n",kmeans.cluster_centers_)

plt.figure(figsize = (8,6))

plt.scatter(x_pca[:,0], x_pca[:,1], c=kmeans.labels_, cmap='plasma')

plt.xlabel('First Principal Component')

plt.ylabel('Second Principal Component')

plt.show()

# Dividing data into subsets
#subset 1
#subset1 = dataset[['reserved_room_type','average_daily_rate','adults','children','stays_in_weekend_nights','lead_time','stays_in_week_nights','meal','total_of_special_requests']]
subset1 = dataset[['adults','babies','lead_time','stays_in_week_nights','stays_in_weekend_nights','booking_changes','average_daily_rate']]

#based on corelated data
subset2 = dataset[['lead_time','stays_in_weekend_nights','stays_in_week_nights']]

#subset 3
subset3 = dataset[['adults','children','stays_in_week_nights','stays_in_weekend_nights','lead_time','market_segment']]

#Entire dataset
subset4 = dataset[['reserved_room_type','average_daily_rate','adults','children', 'babies','market_segment', 'booking_changes','deposit_type', 'days_in_waiting_list','previous_stays','stays_in_weekend_nights','lead_time','stays_in_week_nights','meal','total_of_special_requests']]

# Normalizing numerical features so that each feature has mean 0 and variance 1
feature_scaler = StandardScaler()
X1 = feature_scaler.fit_transform(subset1)
X2 = feature_scaler.fit_transform(subset2)
X3 = feature_scaler.fit_transform(subset3)
X4 = feature_scaler.fit_transform(subset4)

# Finding the number of clusters (K) - Elbow Plot Method
inertia = []
for i in range(1,11):
    kmeans = KMeans(n_clusters = i, random_state = 100)
    kmeans.fit(X1)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia)
plt.title('The Elbow Plot')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

# # Converting continues values into discrete values
# def converter(value):
#     if value >= 4:
#         return 1
#     else:
#         return 0

# dataset['reserved_room_type'] = dataset['reserved_room_type'].apply(converter)
# print(dataset.head(5))

# Running KMeans to generate labels
kmeans = KMeans(n_clusters = 2)
kmeans.fit(X1)

# Implementing t-SNE to visualize dataset
tsne = TSNE(n_components = 2, perplexity =300,n_iter=2000)
x_tsne = tsne.fit_transform(X1)

# rrt = list(dataset['reserved_room_type'])
# avgrate = list(dataset['average_daily_rate'])
adults = list(dataset['adults'])
babies = list(dataset['babies'])
lt=list(dataset['lead_time'])
sweekend = list(dataset['stays_in_weekend_nights'])
sweek = list(dataset['stays_in_week_nights'])
bc = list(dataset['booking_changes'])
avgrate = list(dataset['average_daily_rate'])



data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'adults:{a}; babies:{b};lt:{c};sweekend:{d}; sweek:{e}; bc:{f};avgrate:{g}' for a,b,c,d,e,f,g in list(zip(adults,babies,lt,sweekend,sweek,bc,avgrate))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700,
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE1.html')

tsne = TSNE(n_components = 2, perplexity =400,n_iter=2000)
x_tsne = tsne.fit_transform(X2)

# rrt = list(dataset['reserved_room_type'])
# avgrate = list(dataset['average_daily_rate'])
# adults = list(dataset['adults'])
# children = list(dataset['children'])
lt=list(dataset['lead_time'])
sweekend = list(dataset['stays_in_weekend_nights'])
sweek = list(dataset['stays_in_week_nights'])
# ms = list(dataset['market_segment'])
# days_wl = list(dataset['days_in_waiting_list'])

data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'lt:{a};sweekend:{b}; sweek:{c}' for a,b,c in list(zip(lt,sweekend,sweek))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700,
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE1.html')

tsne = TSNE(n_components = 2, perplexity =200,n_iter=2000)
x_tsne = tsne.fit_transform(X3)

# rrt = list(dataset['reserved_room_type'])
# avgrate = list(dataset['average_daily_rate'])
adults = list(dataset['adults'])
children = list(dataset['children'])
lt=list(dataset['lead_time'])
sweekend = list(dataset['stays_in_weekend_nights'])
sweek = list(dataset['stays_in_week_nights'])
ms = list(dataset['market_segment'])
# days_wl = list(dataset['days_in_waiting_list'])

data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'adults:{a};children:{b};lt:{c};sweekend:{d}; sweek:{e};ms{f}' for a,b,c,d,e,f in list(zip(adults,children,lt,sweekend,sweek,ms))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700,
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE1.html')

tsne = TSNE(n_components = 2, perplexity =200,n_iter=2000)
x_tsne = tsne.fit_transform(X4)

rrt = list(dataset['reserved_room_type'])
avgrate = list(dataset['average_daily_rate'])
adults = list(dataset['adults'])
children = list(dataset['children'])
babies = list(dataset['babies'])
ms = list(dataset['market_segment'])
bc = list(dataset['booking_changes'])
dt = list(dataset['deposit_type'])
dwl = list(dataset['days_in_waiting_list'])
ps = list(dataset['previous_stays'])
lt=list(dataset['lead_time'])
sweekend = list(dataset['stays_in_weekend_nights'])
sweek = list(dataset['stays_in_week_nights'])
meal = list(dataset['meal'])
tsr = list(dataset['total_of_special_requests'])



data = [go.Scatter(x=x_tsne[:,0], y=x_tsne[:,1], mode='markers',
                    marker = dict(color=kmeans.labels_, colorscale='Rainbow', opacity=0.5),
                                text=[f'rrt:{a};avgrate:{b};adults:{c};children:{d};babies:{e};ms{f};bc{g};dt{h};dwl{i};ps{j};lt:{k};sweekend:{l}; sweek:{m};meal{n};tsr{o}' for a,b,c,d,e,f,g,h,i,j,k,l,m,n,o in list(zip(rrt,avgrate,adults,children,babies,ms,bc,dt,dwl,ps,lt,sweekend,sweek,meal,tsr))],
                                hoverinfo='text')]

layout = go.Layout(title = 't-SNE Dimensionality Reduction', width = 700, height = 700,
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
offline.plot(fig,filename='t-SNE1.html')